name: primeiro_candidato
label: Primeiro Candidato
tags: [busca, arrays]
text: |

    # Primeiro Candidato

    Clara tem se preocupado muito com a complexidade dos algoritmos que escreve depois de assistir as primeiras aulas de Estruturas de Dados.Certa vez, sua colega mostrou a implementação de um algoritmo de busca $O(n)$ para encontrar o primeiro candidato com nota 700 no ENEM.
    Como Clara sabe que o INEP sempre divulga as notas ordenadas de forma crescente, ela identificou que dá para implementar um algoritmo de busca mais veloz. Implemente esse algoritmo e use o método da árvore de recursão para demonstrar sua classe de complexidade.

    *Importante:* sua solução deve ser mais rápida que $O(n)$.  

    ## Entrada

    Seu programa deve ler uma linha contendo uma sequências de numeros crescentes

    ## Saída
    
    Seu programa deve imprimir o caminho percorrido até encontrar o primeiro valor 700 do array Se existir, se não continue até o final. O caminho deve ser indicado por nível, índice e valor percorrido.
    Caso tenha mais de um valor 700, continue a busca normalmente até encontrar o primeiro.
    
    ## Exemplos
    
        javac Solucao.java; java Solucao
        700 700 800
        Nivel 0: indice 1, valor 700
        Nivel 1: indice 0, valor 700

        javac Solucao.java; java Solucao
        100 200 300 400 500
        Nivel 0: indice 2, valor 300
        Nivel 1: indice 3, valor 400
        Nivel 2: indice 4, valor 500
        

tests:
-   category: public
    input: |
        700 700 800
    output: |
        Nivel 0: indice 1, valor 700
        Nivel 1: indice 0, valor 700
-   category: public
    input: |
        100 200 300 400 500
    output: |
        Nivel 0: indice 2, valor 300
        Nivel 1: indice 3, valor 400
        Nivel 2: indice 4, valor 500
-   input: |
        50 100 150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900 950
    output: |
        Nivel 0: indice 9, valor 500
        Nivel 1: indice 14, valor 750
        Nivel 2: indice 11, valor 600
        Nivel 3: indice 12, valor 650
        Nivel 4: indice 13, valor 700
-   input: |
        700
    output: |
        Nivel 0: indice 0, valor 700
-   input: |
        50 100 150 200 250 300 350 400 450 500 550 600 650 700 700 700 750 800 900
    output: |
        Nivel 0: indice 9, valor 500
        Nivel 1: indice 14, valor 700
        Nivel 2: indice 11, valor 600
        Nivel 3: indice 12, valor 650
        Nivel 4: indice 13, valor 700